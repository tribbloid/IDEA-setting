<application>
  <component name="LanguageServerSettingsState">
    <state>
      <map>
        <entry key="1405fe17-9970-4fdd-be18-8b33315dafd8">
          <value>
            <LanguageServerDefinitionSettings>
              <option name="configurationContent" value="{&#10;  &quot;metals.disableReleaseNotes&quot;: false,&#10;  &quot;metals.enableBestEffort&quot;: false,&#10;  &quot;metals.serverVersion&quot;: &quot;1.5.3&quot;,&#10;  &quot;metals.serverProperties&quot;: [&#10;    &quot;-Xmx2G&quot;,&#10;    &quot;-XX:+UseZGC&quot;,&#10;    &quot;-XX:ZUncommitDelay\u003d30&quot;,&#10;    &quot;-XX:ZCollectionInterval\u003d5&quot;,&#10;    &quot;-XX:+IgnoreUnrecognizedVMOptions&quot;&#10;  ],&#10;  &quot;metals.excludedPackages&quot;: [],&#10;  &quot;metals.javaVersion&quot;: &quot;17&quot;,&#10;  &quot;metals.superMethodLensesEnabled&quot;: true,&#10;  &quot;metals.enableStripMarginOnTypeFormatting&quot;: true,&#10;  &quot;metals.enableIndentOnPaste&quot;: false,&#10;  &quot;metals.verboseCompilation&quot;: false,&#10;  &quot;metals.enableSemanticHighlighting&quot;: true,&#10;  &quot;metals.testUserInterface&quot;: &quot;Test Explorer&quot;,&#10;  &quot;metals.customProjectRoot&quot;: &quot;&quot;,&#10;  &quot;metals.fallbackScalaVersion&quot;: &quot;automatic&quot;,&#10;  &quot;metals.suggestLatestUpgrade&quot;: false,&#10;  &quot;metals.defaultBspToBuildTool&quot;: false,&#10;  &quot;metals.autoImportBuilds&quot;: &quot;off&quot;,&#10;  &quot;metals.startMcpServer&quot;: false&#10;}&#10;" />
              <option name="configurationSchemaContent" value="{&#10;  &quot;$schema&quot;: &quot;http://json-schema.org/draft-07/schema#&quot;,&#10;  &quot;$id&quot;: &quot;LSP4IJ/metals/settings.schema.json&quot;,&#10;  &quot;title&quot;: &quot;LSP4IJ Metals language server settings JSON schema&quot;,&#10;  &quot;description&quot;: &quot;JSON schema for Metals language server settings.&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;additionalProperties&quot;: false,&#10;  &quot;properties&quot;: {&#10;    &quot;metals.disableReleaseNotes&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;Do not show release notes when Metals was updated.&quot;&#10;    },&#10;    &quot;metals.enableBestEffort&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;Enable best effort mode for Metals in Scala 3. If enabled, Metals will try to provide most up to date information from the codebase even if it\u0027s not compiling.&quot;&#10;    },&#10;    &quot;metals.defaultShell&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optionally provide a default shell executable to use for build operations.&quot;&#10;    },&#10;    &quot;metals.serverVersion&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;1.5.3&quot;,&#10;      &quot;description&quot;: &quot;The version of the Metals server artifact. Requires reloading the window.  \n\n**VS Code extension version is guaranteed to work only with the default version, change if you know what you\u0027re doing**&quot;&#10;    },&#10;    &quot;metals.serverProperties&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;default&quot;: [&#10;        &quot;-Xmx2G&quot;,&#10;        &quot;-XX:+UseZGC&quot;,&#10;        &quot;-XX:ZUncommitDelay\u003d30&quot;,&#10;        &quot;-XX:ZCollectionInterval\u003d5&quot;,&#10;        &quot;-XX:+IgnoreUnrecognizedVMOptions&quot;&#10;      ],&#10;      &quot;description&quot;: &quot;Optional list of properties to pass along to the Metals server. By default, the environment variable `JAVA_OPTS` and `.jvmopts` file are respected. Each property needs to be a separate item.\n\nExample: `-Dhttps.proxyHost\u003d…`, `-Dhttps.proxyPort\u003d…` or `-Dmetals.statistics\u003dall`&quot;&#10;    },&#10;    &quot;metals.coursierMirror&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional alternative repository to maven central if maven central is not available. For example: `https://jcenter.bintray.com`, which will be used to set to property described [here](https://get-coursier.io/blog/#mirrors)&quot;&#10;    },&#10;    &quot;metals.excludedPackages&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;default&quot;: [],&#10;      &quot;description&quot;: &quot;List of packages you\u0027d like to be left out of completions, symbol searches, and code actions.\n\nEx. `akka.actor.typed.javadsl` will ensure nothing in the `javadsl` package gets recommended to you.\n\nYou can find the list of default exclusions [here on the Metals website](https://scalameta.org/metals/docs/editors/user-configuration/#excluded-packages).\n\nIf you need to remove one of the defaults, you can simply include it and preface it with `--`.&quot;&#10;    },&#10;    &quot;metals.inlayHints.inferredTypes.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for inferred variable types and method return types.\n```scala \n\n val x/*: List[Int]*/ \u003d List(1)\n def foo(x: Int)/*: Option[Int]*/ \u003d Some(x)\n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.implicitArguments.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for implicit arguments. \n```scala \n\n given bar: Int \u003d 123\n def foo(x: Int)(using Int) \u003d ??? \n foo(1)/*(using bar)*/\n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.implicitConversions.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for implicit conversions. \n```scala \n\n implicit class MInt(i: Int) {\n   def incr: Int \u003d i + 1\n }\n val x \u003d /*MInt(*/1/*)*/.incr \n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.typeParameters.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for type parameters. \n```scala \n\n val x \u003d List[Int](1)\n def foo[T](x: T) \u003d x\n foo/*[Int]*/(1)\n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.hintsInPatternMatch.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints in pattern matches. \n```scala \n\n case class Foo(a: Int, b: Int)\n val foo \u003d Foo(1, 2)\n foo match {\n   case Foo(a/*: Int*/, b/*: Int*/) \u003d\u003e\n }\n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.byNameParameters.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for by-name parameters. \n```scala \n\n def foo(x: \u003d\u003e Int) \u003d ???\n foo(/*\u003d\u003e */1 + 2)\n foo {/*\u003d\u003e */\n   val x \u003d 1\n   x + 1\n }\n```&quot;&#10;    },&#10;    &quot;metals.inlayHints.namedParameters.enable&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;Enable/disable inlay hints for named parameters. \n```scala \n\n def foo(number: Int) \u003d ???\n foo(/*number \u003d */1)\n```&quot;&#10;    },&#10;    &quot;metals.javaHome&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional path to the Java home directory that will be used for compiling the project.\n\nDefaults to JDK used by Metals\u0027s server (look: Java Version).\n\nThis Java version should be lower or equal to JDK version used by the Metals\u0027s server.&quot;&#10;    },&#10;    &quot;metals.metalsJavaHome&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional path to the Java home directory that will be used for the running Metals server.\n\nBy default Metals will try to infer it using the version specified in metals.javaVersion.\n\nThis Java version should be higher or equal to 17.&quot;&#10;    },&#10;    &quot;metals.javaVersion&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;17&quot;,&#10;      &quot;enum&quot;: [&#10;        &quot;17&quot;,&#10;        &quot;21&quot;&#10;      ],&#10;      &quot;description&quot;: &quot;JDK version used for running the Metals\u0027s server.\n\nShould be greater or equal to the JDK version used for the project (look: Java Home).&quot;&#10;    },&#10;    &quot;metals.sbtScript&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional absolute path to an `sbt` executable to use for running `sbt bloopInstall`.\n\nBy default, Metals uses `java -jar sbt-launch.jar` with an embedded launcher while respecting `.jvmopts` and `.sbtopts`.\n\nUpdate this setting if your `sbt` script requires more customizations like using environment variables.&quot;&#10;    },&#10;    &quot;metals.millScript&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional absolute path to a `mill` executable to use for running `mill mill.contrib.Bloop/install`.\n\nBy default, Metals uses an embedded `millw` script while respecting `.mill-version` file.\n\nUpdate this setting if your `mill` script requires more customizations.&quot;&#10;    },&#10;    &quot;metals.mavenScript&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional absolute path to a `mvn` executable to use for running `mvn ch.epfl.scala:maven-bloop_2.10:\u003cbloop_version\u003e:bloopInstall`.\n\nBy default, Metals uses an embedded `mvnw` script.\n\nUpdate this setting if your `mvn` script requires more customizations.&quot;&#10;    },&#10;    &quot;metals.gradleScript&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional absolute path to a `gradle` executable to use for running `gradle bloopInstall`.\n\nBy default, Metals uses an embedded `gradlew` script.\n\nUpdate this setting if your `gradle` script requires more customizations.&quot;&#10;    },&#10;    &quot;metals.scalafmtConfigPath&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional custom path to the .scalafmt.conf file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows).&quot;&#10;    },&#10;    &quot;metals.scalafixConfigPath&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional custom path to the .scalafix.conf file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows).&quot;&#10;    },&#10;    &quot;metals.scalafixRulesDependencies&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;description&quot;: &quot;List of Scalafix rules dependencies in case they are not available by default in Metals and running scalafix fails due to \u0027rule not found\u0027 exception. For example: `com.github.liancheng::organize-imports:0.6.0` which follows the [coursier](https://get-coursier.io/) convention.&quot;&#10;    },&#10;    &quot;metals.bloopVersion&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;This version will be used for the Bloop build tool plugin, for any supported build tool,while importing in Metals as well as for running the embedded server&quot;&#10;    },&#10;    &quot;metals.bloopJvmProperties&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;description&quot;: &quot;Optional list of JVM properties to pass along to the Bloop server. Each property needs to be a separate item.\n\nExample: `-Xmx1G` or `-Xms100M`&quot;&#10;    },&#10;    &quot;metals.bloopSbtAlreadyInstalled&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;description&quot;: &quot;If true, Metals will not generate a `project/metals.sbt` file under the assumption that sbt-bloop is already manually installed in the sbt build. Build import will fail with a \u0027not valid command bloopInstall\u0027 error in case Bloop is not manually installed in the build when using this option.&quot;&#10;    },&#10;    &quot;metals.customRepositories&quot;: {&#10;      &quot;type&quot;: &quot;array&quot;,&#10;      &quot;items&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;description&quot;: &quot;Optional list of custom resolvers passed to Coursier when fetching metals dependencies.\n\nFor documentation on accepted values see the [Coursier documentation](https://get-coursier.io/docs/other-repositories).\n\nThe extension will pass these to Coursier using the COURSIER_REPOSITORIES environment variable after joining the custom repositories with a pipe character (|).&quot;&#10;    },&#10;    &quot;metals.superMethodLensesEnabled&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: true,&#10;      &quot;description&quot;: &quot;Enable/disable goto super method code lens.&quot;&#10;    },&#10;    &quot;metals.enableStripMarginOnTypeFormatting&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: true,&#10;      &quot;description&quot;: &quot;When enabled, if you press the return key from the first line of a multiline string containing a pipe, it will automatically add `.stripMargin`.&quot;&#10;    },&#10;    &quot;metals.enableIndentOnPaste&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;When this option is enabled, when user pastes any snippet into a Scala file, Metals will try to adjust the indentation to that of the current cursor.&quot;&#10;    },&#10;    &quot;metals.verboseCompilation&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;If a build server supports it (for example Bloop or Scala CLI), setting it to true will make the logs contain all the possible debugging information including that about incremental compilation in Zinc.&quot;&#10;    },&#10;    &quot;metals.enableSemanticHighlighting&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: true,&#10;      &quot;description&quot;: &quot;When this option is enabled, Metals will provide semantic tokens for clients that support it. The feature is still experimental and does not work for all sources.&quot;&#10;    },&#10;    &quot;metals.testUserInterface&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;Test Explorer&quot;,&#10;      &quot;enum&quot;: [&#10;        &quot;Test Explorer&quot;,&#10;        &quot;Code Lenses&quot;&#10;      ],&#10;      &quot;description&quot;: &quot;Specifies which UI should be used for tests. `Code lenses` shows virtual text above test class, just like it was previously. `Test explorer` is a new option which shows gutter icons on the left of the file in a less intrusive way. Moreover, this option comes with a new panel called `Testing` which lists all test suites in your codebase and allows you to browse tests and navigate to the file which contains them.&quot;&#10;    },&#10;    &quot;metals.testEnvironmentVariables&quot;: {&#10;      &quot;type&quot;: &quot;object&quot;,&#10;      &quot;additionalProperties&quot;: {&#10;        &quot;type&quot;: &quot;string&quot;&#10;      },&#10;      &quot;description&quot;: &quot;Optional environment variables to pass to tests. Each key-value pair should be a separate item.&quot;&#10;    },&#10;    &quot;metals.customProjectRoot&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;&quot;,&#10;      &quot;description&quot;: &quot;Optional relative path to your project\u0027s root. If you want your project root to be the workspace/workspace root set it to \&quot;.\&quot; .&quot;&#10;    },&#10;    &quot;metals.fallbackScalaVersion&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;automatic&quot;,&#10;      &quot;enum&quot;: [&#10;        &quot;automatic&quot;,&#10;        &quot;2.13.16&quot;,&#10;        &quot;2.13.15&quot;,&#10;        &quot;2.13.14&quot;,&#10;        &quot;2.13.13&quot;,&#10;        &quot;2.12.20&quot;,&#10;        &quot;2.12.19&quot;,&#10;        &quot;2.12.18&quot;,&#10;        &quot;2.12.17&quot;,&#10;        &quot;2.11.12&quot;,&#10;        &quot;3.6.4&quot;,&#10;        &quot;3.6.3&quot;,&#10;        &quot;3.6.2&quot;,&#10;        &quot;3.5.2&quot;,&#10;        &quot;3.5.1&quot;,&#10;        &quot;3.5.0&quot;,&#10;        &quot;3.4.3&quot;,&#10;        &quot;3.4.2&quot;,&#10;        &quot;3.4.1&quot;,&#10;        &quot;3.4.0&quot;,&#10;        &quot;3.3.5&quot;,&#10;        &quot;3.3.4&quot;,&#10;        &quot;3.3.3&quot;&#10;      ],&#10;      &quot;description&quot;: &quot;The Scala compiler version that is used as the default or fallback in case a file doesn\u0027t belong to any build target or the specified Scala version isn\u0027t supported by Metals.\n\nThis applies to standalone Scala files, worksheets, and Scala CLI scripts.\n\n The `automatic` value means that the Scala version for these files will be inferred from the highest supported Scala version in your projects build definition&quot;&#10;    },&#10;    &quot;metals.javaFormat.eclipseConfigPath&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional custom path to the eclipse-formatter.xml file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows).&quot;&#10;    },&#10;    &quot;metals.javaFormat.eclipseProfile&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional Eclipse format profile to use.&quot;&#10;    },&#10;    &quot;metals.scalaCliLauncher&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Optional path to Scala CLI launcher to use.&quot;&#10;    },&#10;    &quot;metals.suggestLatestUpgrade&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;Once in a day, notify if there are new server releases (including snapshots)&quot;&#10;    },&#10;    &quot;metals.defaultBspToBuildTool&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;Default to using build tool as your build server.&quot;&#10;    },&#10;    &quot;metals.autoImportBuilds&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;default&quot;: &quot;off&quot;,&#10;      &quot;enum&quot;: [&#10;        &quot;off&quot;,&#10;        &quot;initial&quot;,&#10;        &quot;all&quot;&#10;      ],&#10;      &quot;description&quot;: &quot;Automatically import builds rather than prompting the user to choose. `initial` will only automatically import a build when a project is first opened, `all` will automate build imports after subsequent changes as well.&quot;&#10;    },&#10;    &quot;metals.startMcpServer&quot;: {&#10;      &quot;type&quot;: &quot;boolean&quot;,&#10;      &quot;default&quot;: false,&#10;      &quot;description&quot;: &quot;If Metals should start an HTTP Model Context Protocol server, that can be used by AI tools to provide better context about the codebase. Needs to be enabled in the client as well.&quot;&#10;    }&#10;  }&#10;}&#10;" />
              <option name="experimentalContent" value="{}" />
              <option name="initializationOptionsContent" value="{&#10;  &quot;isHttpEnabled&quot;: true&#10;}" />
            </LanguageServerDefinitionSettings>
          </value>
        </entry>
      </map>
    </state>
  </component>
</application>